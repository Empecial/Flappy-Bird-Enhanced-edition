//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Flap"",
            ""id"": ""5bfaf96c-56d7-4aa6-b4ad-46c72691e619"",
            ""actions"": [
                {
                    ""name"": ""FlapJump"",
                    ""type"": ""Button"",
                    ""id"": ""3498f565-6350-42d6-beac-244ab9515fb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlapDive"",
                    ""type"": ""Button"",
                    ""id"": ""51c00fa3-fe36-4e15-949e-0a8967df49aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9749ab17-2fb1-493d-85f5-719fdb8281bf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlapJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d30b0070-5424-4e98-a2f0-24544d2efacf"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlapJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fa12413-da08-478a-8e65-e65a81212387"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlapJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bf50321-63da-4f78-944e-5c33ef6e82dd"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlapDive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""479b393a-d619-442e-ade5-74ff9a71652b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlapDive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Flap
        m_Flap = asset.FindActionMap("Flap", throwIfNotFound: true);
        m_Flap_FlapJump = m_Flap.FindAction("FlapJump", throwIfNotFound: true);
        m_Flap_FlapDive = m_Flap.FindAction("FlapDive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flap
    private readonly InputActionMap m_Flap;
    private IFlapActions m_FlapActionsCallbackInterface;
    private readonly InputAction m_Flap_FlapJump;
    private readonly InputAction m_Flap_FlapDive;
    public struct FlapActions
    {
        private @PlayerInputActions m_Wrapper;
        public FlapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FlapJump => m_Wrapper.m_Flap_FlapJump;
        public InputAction @FlapDive => m_Wrapper.m_Flap_FlapDive;
        public InputActionMap Get() { return m_Wrapper.m_Flap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlapActions set) { return set.Get(); }
        public void SetCallbacks(IFlapActions instance)
        {
            if (m_Wrapper.m_FlapActionsCallbackInterface != null)
            {
                @FlapJump.started -= m_Wrapper.m_FlapActionsCallbackInterface.OnFlapJump;
                @FlapJump.performed -= m_Wrapper.m_FlapActionsCallbackInterface.OnFlapJump;
                @FlapJump.canceled -= m_Wrapper.m_FlapActionsCallbackInterface.OnFlapJump;
                @FlapDive.started -= m_Wrapper.m_FlapActionsCallbackInterface.OnFlapDive;
                @FlapDive.performed -= m_Wrapper.m_FlapActionsCallbackInterface.OnFlapDive;
                @FlapDive.canceled -= m_Wrapper.m_FlapActionsCallbackInterface.OnFlapDive;
            }
            m_Wrapper.m_FlapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FlapJump.started += instance.OnFlapJump;
                @FlapJump.performed += instance.OnFlapJump;
                @FlapJump.canceled += instance.OnFlapJump;
                @FlapDive.started += instance.OnFlapDive;
                @FlapDive.performed += instance.OnFlapDive;
                @FlapDive.canceled += instance.OnFlapDive;
            }
        }
    }
    public FlapActions @Flap => new FlapActions(this);
    public interface IFlapActions
    {
        void OnFlapJump(InputAction.CallbackContext context);
        void OnFlapDive(InputAction.CallbackContext context);
    }
}
